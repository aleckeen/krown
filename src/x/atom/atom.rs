use crate::x::atom::predefined::XA;
use std::ffi::CString;
use x11::xlib;

const UTF8_STRING: &'static str = "UTF8_STRING";

const NET_WM_NAME: &'static str = "_NET_WM_NAME";
const NET_WM_STATE: &'static str = "_NET_WM_STATE";
const NET_WM_WINDOW_TYPE: &'static str = "_NET_WM_WINDOW_TYPE";

const NET_WM_WINDOW_TYPE_COMBO: &'static str = "_NET_WM_WINDOW_TYPE_COMBO";
const NET_WM_WINDOW_TYPE_DESKTOP: &'static str = "_NET_WM_WINDOW_TYPE_DESKTOP";
const NET_WM_WINDOW_TYPE_DIALOG: &'static str = "_NET_WM_WINDOW_TYPE_DIALOG";
const NET_WM_WINDOW_TYPE_DND: &'static str = "_NET_WM_WINDOW_TYPE_DND";
const NET_WM_WINDOW_TYPE_DOCK: &'static str = "_NET_WM_WINDOW_TYPE_DOCK";
const NET_WM_WINDOW_TYPE_DROPDOWN_MENU: &'static str = "_NET_WM_WINDOW_TYPE_DROPDOWN_MENU";
const NET_WM_WINDOW_TYPE_MENU: &'static str = "_NET_WM_WINDOW_TYPE_MENU";
const NET_WM_WINDOW_TYPE_NORMAL: &'static str = "_NET_WM_WINDOW_TYPE_NORMAL";
const NET_WM_WINDOW_TYPE_NOTIFICATION: &'static str = "_NET_WM_WINDOW_TYPE_NOTIFICATION";
const NET_WM_WINDOW_TYPE_POPUP_MENU: &'static str = "_NET_WM_WINDOW_TYPE_POPUP_MENU";
const NET_WM_WINDOW_TYPE_SPLASH: &'static str = "_NET_WM_WINDOW_TYPE_SPLASH";
const NET_WM_WINDOW_TYPE_TOOLBAR: &'static str = "_NET_WM_WINDOW_TYPE_TOOLBAR";
const NET_WM_WINDOW_TYPE_TOOLTIP: &'static str = "_NET_WM_WINDOW_TYPE_TOOLTIP";
const NET_WM_WINDOW_TYPE_UTILITY: &'static str = "_NET_WM_WINDOW_TYPE_UTILITY";

const NET_WM_STATE_ABOVE: &'static str = "_NET_WM_STATE_ABOVE";
const NET_WM_STATE_BELOW: &'static str = "_NET_WM_STATE_BELOW";
const NET_WM_STATE_DEMANDS_ATTENTION: &'static str = "_NET_WM_STATE_DEMANDS_ATTENTION";
const NET_WM_STATE_FOCUSED: &'static str = "_NET_WM_STATE_FOCUSED";
const NET_WM_STATE_FULLSCREEN: &'static str = "_NET_WM_STATE_FULLSCREEN";
const NET_WM_STATE_HIDDEN: &'static str = "_NET_WM_STATE_HIDDEN";
const NET_WM_STATE_MAXIMIZED_HORZ: &'static str = "_NET_WM_STATE_MAXIMIZED_HORZ";
const NET_WM_STATE_MAXIMIZED_VERT: &'static str = "_NET_WM_STATE_MAXIMIZED_VERT";
const NET_WM_STATE_MODAL: &'static str = "_NET_WM_STATE_MODAL";
const NET_WM_STATE_SKIP_PAGER: &'static str = "_NET_WM_STATE_SKIP_PAGER";
const NET_WM_STATE_SKIP_TASKBAR: &'static str = "_NET_WM_STATE_SKIP_TASKBAR";
const NET_WM_STATE_STAYS_ON_TOP: &'static str = "_NET_WM_STATE_STAYS_ON_TOP";
const NET_WM_STATE_STICKY: &'static str = "_NET_WM_STATE_STICKY";

#[derive(PartialEq)]
pub enum Atom
{
  Primary,
  Secondary,
  Arc,
  Atom,
  Bitmap,
  Cardinal,
  Colormap,
  Cursor,
  CutBuffer0,
  CutBuffer1,
  CutBuffer2,
  CutBuffer3,
  CutBuffer4,
  CutBuffer5,
  CutBuffer6,
  CutBuffer7,
  Drawable,
  Font,
  Integer,
  Pixmap,
  Point,
  Rectangle,
  Resourcemanager,
  RGBColorMap,
  RGBBestMap,
  RGBBlueMap,
  RGBDefaultMap,
  RGBGrayMap,
  RGBGreenMap,
  RGBRedMap,
  String,
  Visualid,
  Window,
  WMCommand,
  WMHints,
  WMClientMachine,
  WMIconName,
  WMIconSize,
  WMName,
  WMNormalHints,
  WMSizeHints,
  WMZoomHints,
  MinSpace,
  NormSpace,
  MaxSpace,
  EndSpace,
  SuperscriptX,
  SuperscriptY,
  SubscriptX,
  SubscriptY,
  UnderlinePosition,
  UnderlineThickness,
  StrikeoutAscent,
  StrikeoutDescent,
  ItalicAngle,
  XHeight,
  QuadWidth,
  Weight,
  PointSize,
  Resolution,
  Copyright,
  Notice,
  FontName,
  FamilyName,
  FullName,
  CapHeight,
  WMClass,
  WMTransientFor,

  Utf8String,

  NetWMName,
  NetWMState,
  NetWMWindowType,

  NetWMWindowTypeCombo,
  NetWMWindowTypeDesktop,
  NetWMWindowTypeDialog,
  NetWMWindowTypeDnd,
  NetWMWindowTypeDock,
  NetWMWindowTypeDropdownMenu,
  NetWMWindowTypeMenu,
  NetWMWindowTypeNormal,
  NetWMWindowTypeNotification,
  NetWMWindowTypePopupMenu,
  NetWMWindowTypeSplash,
  NetWMWindowTypeToolbar,
  NetWMWindowTypeTooltip,
  NetWMWindowTypeUtility,

  NetWMStateAbove,
  NetWMStateBelow,
  NetWMStateDemandsAttention,
  NetWMStateFocused,
  NetWMStateFullscreen,
  NetWMStateHidden,
  NetWMStateMaximizedHorz,
  NetWMStateMaximizedVert,
  NetWMStateModal,
  NetWMStateSkipPager,
  NetWMStateSkipTaskbar,
  NetWMStateStaysOnTop,
  NetWMStateSticky,

  All,
}

pub struct Atoms
{
  utf8_string: xlib::Atom,

  net_wm_name: xlib::Atom,
  net_wm_state: xlib::Atom,
  net_wm_window_type: xlib::Atom,

  net_wm_window_type_combo: xlib::Atom,
  net_wm_window_type_desktop: xlib::Atom,
  net_wm_window_type_dialog: xlib::Atom,
  net_wm_window_type_dnd: xlib::Atom,
  net_wm_window_type_dock: xlib::Atom,
  net_wm_window_type_dropdown_menu: xlib::Atom,
  net_wm_window_type_menu: xlib::Atom,
  net_wm_window_type_normal: xlib::Atom,
  net_wm_window_type_notification: xlib::Atom,
  net_wm_window_type_popup_menu: xlib::Atom,
  net_wm_window_type_splash: xlib::Atom,
  net_wm_window_type_toolbar: xlib::Atom,
  net_wm_window_type_tooltip: xlib::Atom,
  net_wm_window_type_utility: xlib::Atom,

  net_wm_state_above: xlib::Atom,
  net_wm_state_below: xlib::Atom,
  net_wm_state_demands_attention: xlib::Atom,
  net_wm_state_focused: xlib::Atom,
  net_wm_state_fullscreen: xlib::Atom,
  net_wm_state_hidden: xlib::Atom,
  net_wm_state_maximized_horz: xlib::Atom,
  net_wm_state_maximized_vert: xlib::Atom,
  net_wm_state_modal: xlib::Atom,
  net_wm_state_skip_pager: xlib::Atom,
  net_wm_state_skip_taskbar: xlib::Atom,
  net_wm_state_stays_on_top: xlib::Atom,
  net_wm_state_sticky: xlib::Atom,
}

impl Atoms
{
  pub(crate) fn new(dpy: *mut xlib::Display) -> Self
  {
    Self {
      utf8_string: Self::fetch(dpy, UTF8_STRING),

      net_wm_name: Self::fetch(dpy, NET_WM_NAME),
      net_wm_state: Self::fetch(dpy, NET_WM_STATE),
      net_wm_window_type: Self::fetch(dpy, NET_WM_WINDOW_TYPE),

      net_wm_window_type_combo: Self::fetch(dpy, NET_WM_WINDOW_TYPE_COMBO),
      net_wm_window_type_desktop: Self::fetch(dpy, NET_WM_WINDOW_TYPE_DESKTOP),
      net_wm_window_type_dialog: Self::fetch(dpy, NET_WM_WINDOW_TYPE_DIALOG),
      net_wm_window_type_dnd: Self::fetch(dpy, NET_WM_WINDOW_TYPE_DND),
      net_wm_window_type_dock: Self::fetch(dpy, NET_WM_WINDOW_TYPE_DOCK),
      net_wm_window_type_dropdown_menu: Self::fetch(dpy, NET_WM_WINDOW_TYPE_DROPDOWN_MENU),
      net_wm_window_type_menu: Self::fetch(dpy, NET_WM_WINDOW_TYPE_MENU),
      net_wm_window_type_normal: Self::fetch(dpy, NET_WM_WINDOW_TYPE_NORMAL),
      net_wm_window_type_notification: Self::fetch(dpy, NET_WM_WINDOW_TYPE_NOTIFICATION),
      net_wm_window_type_popup_menu: Self::fetch(dpy, NET_WM_WINDOW_TYPE_POPUP_MENU),
      net_wm_window_type_splash: Self::fetch(dpy, NET_WM_WINDOW_TYPE_SPLASH),
      net_wm_window_type_toolbar: Self::fetch(dpy, NET_WM_WINDOW_TYPE_TOOLBAR),
      net_wm_window_type_tooltip: Self::fetch(dpy, NET_WM_WINDOW_TYPE_TOOLTIP),
      net_wm_window_type_utility: Self::fetch(dpy, NET_WM_WINDOW_TYPE_UTILITY),

      net_wm_state_above: Self::fetch(dpy, NET_WM_STATE_ABOVE),
      net_wm_state_below: Self::fetch(dpy, NET_WM_STATE_BELOW),
      net_wm_state_demands_attention: Self::fetch(dpy, NET_WM_STATE_DEMANDS_ATTENTION),
      net_wm_state_focused: Self::fetch(dpy, NET_WM_STATE_FOCUSED),
      net_wm_state_fullscreen: Self::fetch(dpy, NET_WM_STATE_FULLSCREEN),
      net_wm_state_hidden: Self::fetch(dpy, NET_WM_STATE_HIDDEN),
      net_wm_state_maximized_horz: Self::fetch(dpy, NET_WM_STATE_MAXIMIZED_HORZ),
      net_wm_state_maximized_vert: Self::fetch(dpy, NET_WM_STATE_MAXIMIZED_VERT),
      net_wm_state_modal: Self::fetch(dpy, NET_WM_STATE_MODAL),
      net_wm_state_skip_pager: Self::fetch(dpy, NET_WM_STATE_SKIP_PAGER),
      net_wm_state_skip_taskbar: Self::fetch(dpy, NET_WM_STATE_SKIP_TASKBAR),
      net_wm_state_stays_on_top: Self::fetch(dpy, NET_WM_STATE_STAYS_ON_TOP),
      net_wm_state_sticky: Self::fetch(dpy, NET_WM_STATE_STICKY),
    }
  }

  pub fn to_xatom(&self, atom: Atom) -> xlib::Atom
  {
    match atom {
      Atom::Primary => XA::PRIMARY,
      Atom::Secondary => XA::SECONDARY,
      Atom::Arc => XA::ARC,
      Atom::Atom => XA::ATOM,
      Atom::Bitmap => XA::BITMAP,
      Atom::Cardinal => XA::CARDINAL,
      Atom::Colormap => XA::COLORMAP,
      Atom::Cursor => XA::CURSOR,
      Atom::CutBuffer0 => XA::CUT_BUFFER0,
      Atom::CutBuffer1 => XA::CUT_BUFFER1,
      Atom::CutBuffer2 => XA::CUT_BUFFER2,
      Atom::CutBuffer3 => XA::CUT_BUFFER3,
      Atom::CutBuffer4 => XA::CUT_BUFFER4,
      Atom::CutBuffer5 => XA::CUT_BUFFER5,
      Atom::CutBuffer6 => XA::CUT_BUFFER6,
      Atom::CutBuffer7 => XA::CUT_BUFFER7,
      Atom::Drawable => XA::DRAWABLE,
      Atom::Font => XA::FONT,
      Atom::Integer => XA::INTEGER,
      Atom::Pixmap => XA::PIXMAP,
      Atom::Point => XA::POINT,
      Atom::Rectangle => XA::RECTANGLE,
      Atom::Resourcemanager => XA::RESOURCE_MANAGER,
      Atom::RGBColorMap => XA::RGB_COLOR_MAP,
      Atom::RGBBestMap => XA::RGB_BEST_MAP,
      Atom::RGBBlueMap => XA::RGB_BLUE_MAP,
      Atom::RGBDefaultMap => XA::RGB_DEFAULT_MAP,
      Atom::RGBGrayMap => XA::RGB_GRAY_MAP,
      Atom::RGBGreenMap => XA::RGB_GREEN_MAP,
      Atom::RGBRedMap => XA::RGB_RED_MAP,
      Atom::String => XA::STRING,
      Atom::Visualid => XA::VISUALID,
      Atom::Window => XA::WINDOW,
      Atom::WMCommand => XA::WM_COMMAND,
      Atom::WMHints => XA::WM_HINTS,
      Atom::WMClientMachine => XA::WM_CLIENT_MACHINE,
      Atom::WMIconName => XA::WM_ICON_NAME,
      Atom::WMIconSize => XA::WM_ICON_SIZE,
      Atom::WMName => XA::WM_NAME,
      Atom::WMNormalHints => XA::WM_NORMAL_HINTS,
      Atom::WMSizeHints => XA::WM_SIZE_HINTS,
      Atom::WMZoomHints => XA::WM_ZOOM_HINTS,
      Atom::MinSpace => XA::MIN_SPACE,
      Atom::NormSpace => XA::NORM_SPACE,
      Atom::MaxSpace => XA::MAX_SPACE,
      Atom::EndSpace => XA::END_SPACE,
      Atom::SuperscriptX => XA::SUPERSCRIPT_X,
      Atom::SuperscriptY => XA::SUPERSCRIPT_Y,
      Atom::SubscriptX => XA::SUBSCRIPT_X,
      Atom::SubscriptY => XA::SUBSCRIPT_Y,
      Atom::UnderlinePosition => XA::UNDERLINE_POSITION,
      Atom::UnderlineThickness => XA::UNDERLINE_THICKNESS,
      Atom::StrikeoutAscent => XA::STRIKEOUT_ASCENT,
      Atom::StrikeoutDescent => XA::STRIKEOUT_DESCENT,
      Atom::ItalicAngle => XA::ITALIC_ANGLE,
      Atom::XHeight => XA::X_HEIGHT,
      Atom::QuadWidth => XA::QUAD_WIDTH,
      Atom::Weight => XA::WEIGHT,
      Atom::PointSize => XA::POINT_SIZE,
      Atom::Resolution => XA::RESOLUTION,
      Atom::Copyright => XA::COPYRIGHT,
      Atom::Notice => XA::NOTICE,
      Atom::FontName => XA::FONT_NAME,
      Atom::FamilyName => XA::FAMILY_NAME,
      Atom::FullName => XA::FULL_NAME,
      Atom::CapHeight => XA::CAP_HEIGHT,
      Atom::WMClass => XA::WM_CLASS,
      Atom::WMTransientFor => XA::WM_TRANSIENT_FOR,

      Atom::Utf8String => self.utf8_string,

      Atom::NetWMName => self.net_wm_name,
      Atom::NetWMState => self.net_wm_state,
      Atom::NetWMWindowType => self.net_wm_window_type,

      Atom::NetWMWindowTypeCombo => self.net_wm_window_type_combo,
      Atom::NetWMWindowTypeDesktop => self.net_wm_window_type_desktop,
      Atom::NetWMWindowTypeDialog => self.net_wm_window_type_dialog,
      Atom::NetWMWindowTypeDnd => self.net_wm_window_type_dnd,
      Atom::NetWMWindowTypeDock => self.net_wm_window_type_dock,
      Atom::NetWMWindowTypeDropdownMenu => self.net_wm_window_type_dropdown_menu,
      Atom::NetWMWindowTypeMenu => self.net_wm_window_type_menu,
      Atom::NetWMWindowTypeNormal => self.net_wm_window_type_normal,
      Atom::NetWMWindowTypeNotification => self.net_wm_window_type_notification,
      Atom::NetWMWindowTypePopupMenu => self.net_wm_window_type_popup_menu,
      Atom::NetWMWindowTypeSplash => self.net_wm_window_type_splash,
      Atom::NetWMWindowTypeToolbar => self.net_wm_window_type_toolbar,
      Atom::NetWMWindowTypeTooltip => self.net_wm_window_type_tooltip,
      Atom::NetWMWindowTypeUtility => self.net_wm_window_type_utility,

      Atom::NetWMStateAbove => self.net_wm_state_above,
      Atom::NetWMStateBelow => self.net_wm_state_below,
      Atom::NetWMStateDemandsAttention => self.net_wm_state_demands_attention,
      Atom::NetWMStateFocused => self.net_wm_state_focused,
      Atom::NetWMStateFullscreen => self.net_wm_state_fullscreen,
      Atom::NetWMStateHidden => self.net_wm_state_hidden,
      Atom::NetWMStateMaximizedHorz => self.net_wm_state_maximized_horz,
      Atom::NetWMStateMaximizedVert => self.net_wm_state_maximized_vert,
      Atom::NetWMStateModal => self.net_wm_state_modal,
      Atom::NetWMStateSkipPager => self.net_wm_state_skip_pager,
      Atom::NetWMStateSkipTaskbar => self.net_wm_state_skip_taskbar,
      Atom::NetWMStateStaysOnTop => self.net_wm_state_stays_on_top,
      Atom::NetWMStateSticky => self.net_wm_state_sticky,

      Atom::All => XA::ALL,
    }
  }

  pub fn to_atom(&self, atom: xlib::Atom) -> Option<Atom>
  {
    match atom {
      a if a == XA::ALL => Some(Atom::All),
      a if a == XA::PRIMARY => Some(Atom::Primary),
      a if a == XA::SECONDARY => Some(Atom::Secondary),
      a if a == XA::ARC => Some(Atom::Arc),
      a if a == XA::ATOM => Some(Atom::Atom),
      a if a == XA::BITMAP => Some(Atom::Bitmap),
      a if a == XA::CARDINAL => Some(Atom::Cardinal),
      a if a == XA::COLORMAP => Some(Atom::Colormap),
      a if a == XA::CURSOR => Some(Atom::Cursor),
      a if a == XA::CUT_BUFFER0 => Some(Atom::CutBuffer0),
      a if a == XA::CUT_BUFFER1 => Some(Atom::CutBuffer1),
      a if a == XA::CUT_BUFFER2 => Some(Atom::CutBuffer2),
      a if a == XA::CUT_BUFFER3 => Some(Atom::CutBuffer3),
      a if a == XA::CUT_BUFFER4 => Some(Atom::CutBuffer4),
      a if a == XA::CUT_BUFFER5 => Some(Atom::CutBuffer5),
      a if a == XA::CUT_BUFFER6 => Some(Atom::CutBuffer6),
      a if a == XA::CUT_BUFFER7 => Some(Atom::CutBuffer7),
      a if a == XA::DRAWABLE => Some(Atom::Drawable),
      a if a == XA::FONT => Some(Atom::Font),
      a if a == XA::INTEGER => Some(Atom::Integer),
      a if a == XA::PIXMAP => Some(Atom::Pixmap),
      a if a == XA::POINT => Some(Atom::Point),
      a if a == XA::RECTANGLE => Some(Atom::Rectangle),
      a if a == XA::RESOURCE_MANAGER => Some(Atom::Resourcemanager),
      a if a == XA::RGB_COLOR_MAP => Some(Atom::RGBColorMap),
      a if a == XA::RGB_BEST_MAP => Some(Atom::RGBBestMap),
      a if a == XA::RGB_BLUE_MAP => Some(Atom::RGBBlueMap),
      a if a == XA::RGB_DEFAULT_MAP => Some(Atom::RGBDefaultMap),
      a if a == XA::RGB_GRAY_MAP => Some(Atom::RGBGrayMap),
      a if a == XA::RGB_GREEN_MAP => Some(Atom::RGBGreenMap),
      a if a == XA::RGB_RED_MAP => Some(Atom::RGBRedMap),
      a if a == XA::STRING => Some(Atom::String),
      a if a == XA::VISUALID => Some(Atom::Visualid),
      a if a == XA::WINDOW => Some(Atom::Window),
      a if a == XA::WM_COMMAND => Some(Atom::WMCommand),
      a if a == XA::WM_HINTS => Some(Atom::WMHints),
      a if a == XA::WM_CLIENT_MACHINE => Some(Atom::WMClientMachine),
      a if a == XA::WM_ICON_NAME => Some(Atom::WMIconName),
      a if a == XA::WM_ICON_SIZE => Some(Atom::WMIconSize),
      a if a == XA::WM_NAME => Some(Atom::WMName),
      a if a == XA::WM_NORMAL_HINTS => Some(Atom::WMNormalHints),
      a if a == XA::WM_SIZE_HINTS => Some(Atom::WMSizeHints),
      a if a == XA::WM_ZOOM_HINTS => Some(Atom::WMZoomHints),
      a if a == XA::MIN_SPACE => Some(Atom::MinSpace),
      a if a == XA::NORM_SPACE => Some(Atom::NormSpace),
      a if a == XA::MAX_SPACE => Some(Atom::MaxSpace),
      a if a == XA::END_SPACE => Some(Atom::EndSpace),
      a if a == XA::SUPERSCRIPT_X => Some(Atom::SuperscriptX),
      a if a == XA::SUPERSCRIPT_Y => Some(Atom::SuperscriptY),
      a if a == XA::SUBSCRIPT_X => Some(Atom::SubscriptX),
      a if a == XA::SUBSCRIPT_Y => Some(Atom::SubscriptY),
      a if a == XA::UNDERLINE_POSITION => Some(Atom::UnderlinePosition),
      a if a == XA::UNDERLINE_THICKNESS => Some(Atom::UnderlineThickness),
      a if a == XA::STRIKEOUT_ASCENT => Some(Atom::StrikeoutAscent),
      a if a == XA::STRIKEOUT_DESCENT => Some(Atom::StrikeoutDescent),
      a if a == XA::ITALIC_ANGLE => Some(Atom::ItalicAngle),
      a if a == XA::X_HEIGHT => Some(Atom::XHeight),
      a if a == XA::QUAD_WIDTH => Some(Atom::QuadWidth),
      a if a == XA::WEIGHT => Some(Atom::Weight),
      a if a == XA::POINT_SIZE => Some(Atom::PointSize),
      a if a == XA::RESOLUTION => Some(Atom::Resolution),
      a if a == XA::COPYRIGHT => Some(Atom::Copyright),
      a if a == XA::NOTICE => Some(Atom::Notice),
      a if a == XA::FONT_NAME => Some(Atom::FontName),
      a if a == XA::FAMILY_NAME => Some(Atom::FamilyName),
      a if a == XA::FULL_NAME => Some(Atom::FullName),
      a if a == XA::CAP_HEIGHT => Some(Atom::CapHeight),
      a if a == XA::WM_CLASS => Some(Atom::WMClass),
      a if a == XA::WM_TRANSIENT_FOR => Some(Atom::WMTransientFor),

      a if a == self.utf8_string => Some(Atom::Utf8String),

      a if a == self.net_wm_name => Some(Atom::NetWMName),
      a if a == self.net_wm_state => Some(Atom::NetWMState),
      a if a == self.net_wm_window_type => Some(Atom::NetWMWindowType),

      a if a == self.net_wm_window_type_combo => Some(Atom::NetWMWindowTypeCombo),
      a if a == self.net_wm_window_type_desktop => Some(Atom::NetWMWindowTypeDesktop),
      a if a == self.net_wm_window_type_dialog => Some(Atom::NetWMWindowTypeDialog),
      a if a == self.net_wm_window_type_dnd => Some(Atom::NetWMWindowTypeDnd),
      a if a == self.net_wm_window_type_dock => Some(Atom::NetWMWindowTypeDock),
      a if a == self.net_wm_window_type_dropdown_menu => Some(Atom::NetWMWindowTypeDropdownMenu),
      a if a == self.net_wm_window_type_menu => Some(Atom::NetWMWindowTypeMenu),
      a if a == self.net_wm_window_type_normal => Some(Atom::NetWMWindowTypeNormal),
      a if a == self.net_wm_window_type_notification => Some(Atom::NetWMWindowTypeNotification),
      a if a == self.net_wm_window_type_popup_menu => Some(Atom::NetWMWindowTypePopupMenu),
      a if a == self.net_wm_window_type_splash => Some(Atom::NetWMWindowTypeSplash),
      a if a == self.net_wm_window_type_toolbar => Some(Atom::NetWMWindowTypeToolbar),
      a if a == self.net_wm_window_type_tooltip => Some(Atom::NetWMWindowTypeTooltip),
      a if a == self.net_wm_window_type_utility => Some(Atom::NetWMWindowTypeUtility),

      a if a == self.net_wm_state_above => Some(Atom::NetWMStateAbove),
      a if a == self.net_wm_state_below => Some(Atom::NetWMStateBelow),
      a if a == self.net_wm_state_demands_attention => Some(Atom::NetWMStateDemandsAttention),
      a if a == self.net_wm_state_focused => Some(Atom::NetWMStateFocused),
      a if a == self.net_wm_state_fullscreen => Some(Atom::NetWMStateFullscreen),
      a if a == self.net_wm_state_hidden => Some(Atom::NetWMStateHidden),
      a if a == self.net_wm_state_maximized_horz => Some(Atom::NetWMStateMaximizedHorz),
      a if a == self.net_wm_state_maximized_vert => Some(Atom::NetWMStateMaximizedVert),
      a if a == self.net_wm_state_modal => Some(Atom::NetWMStateModal),
      a if a == self.net_wm_state_skip_pager => Some(Atom::NetWMStateSkipPager),
      a if a == self.net_wm_state_skip_taskbar => Some(Atom::NetWMStateSkipTaskbar),
      a if a == self.net_wm_state_stays_on_top => Some(Atom::NetWMStateStaysOnTop),
      a if a == self.net_wm_state_sticky => Some(Atom::NetWMStateSticky),

      _ => None,
    }
  }

  fn fetch(dpy: *mut xlib::Display, atom_name: &str) -> xlib::Atom
  {
    unsafe { xlib::XInternAtom(dpy, CString::new(atom_name).unwrap().into_raw(), 0) }
  }
}

impl std::fmt::Display for Atom
{
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result
  {
    write!(
      f,
      "{}",
      match self {
        Self::Primary => "Primary",
        Self::Secondary => "Secondary",
        Self::Arc => "Arc",
        Self::Atom => "Atom",
        Self::Bitmap => "Bitmap",
        Self::Cardinal => "Cardinal",
        Self::Colormap => "Colormap",
        Self::Cursor => "Cursor",
        Self::CutBuffer0 => "CutBuffer0",
        Self::CutBuffer1 => "CutBuffer1",
        Self::CutBuffer2 => "CutBuffer2",
        Self::CutBuffer3 => "CutBuffer3",
        Self::CutBuffer4 => "CutBuffer4",
        Self::CutBuffer5 => "CutBuffer5",
        Self::CutBuffer6 => "CutBuffer6",
        Self::CutBuffer7 => "CutBuffer7",
        Self::Drawable => "Drawable",
        Self::Font => "Font",
        Self::Integer => "Integer",
        Self::Pixmap => "Pixmap",
        Self::Point => "Point",
        Self::Rectangle => "Rectangle",
        Self::Resourcemanager => "Resourcemanager",
        Self::RGBColorMap => "RGBColorMap",
        Self::RGBBestMap => "RGBBestMap",
        Self::RGBBlueMap => "RGBBlueMap",
        Self::RGBDefaultMap => "RGBDefaultMap",
        Self::RGBGrayMap => "RGBGrayMap",
        Self::RGBGreenMap => "RGBGreenMap",
        Self::RGBRedMap => "RGBRedMap",
        Self::String => "String",
        Self::Visualid => "Visualid",
        Self::Window => "Window",
        Self::WMCommand => "WMCommand",
        Self::WMHints => "WMHints",
        Self::WMClientMachine => "WMClientMachine",
        Self::WMIconName => "WMIconName",
        Self::WMIconSize => "WMIconSize",
        Self::WMName => "WMName",
        Self::WMNormalHints => "WMNormalHints",
        Self::WMSizeHints => "WMSizeHints",
        Self::WMZoomHints => "WMZoomHints",
        Self::MinSpace => "MinSpace",
        Self::NormSpace => "NormSpace",
        Self::MaxSpace => "MaxSpace",
        Self::EndSpace => "EndSpace",
        Self::SuperscriptX => "SuperscriptX",
        Self::SuperscriptY => "SuperscriptY",
        Self::SubscriptX => "SubscriptX",
        Self::SubscriptY => "SubscriptY",
        Self::UnderlinePosition => "UnderlinePosition",
        Self::UnderlineThickness => "UnderlineThickness",
        Self::StrikeoutAscent => "StrikeoutAscent",
        Self::StrikeoutDescent => "StrikeoutDescent",
        Self::ItalicAngle => "ItalicAngle",
        Self::XHeight => "XHeight",
        Self::QuadWidth => "QuadWidth",
        Self::Weight => "Weight",
        Self::PointSize => "PointSize",
        Self::Resolution => "Resolution",
        Self::Copyright => "Copyright",
        Self::Notice => "Notice",
        Self::FontName => "FontName",
        Self::FamilyName => "FamilyName",
        Self::FullName => "FullName",
        Self::CapHeight => "CapHeight",
        Self::WMClass => "WMClass",
        Self::WMTransientFor => "WMTransientFor",

        Self::Utf8String => "Utf8String",

        Self::NetWMName => "NetWMName",
        Self::NetWMState => "NetWMState",
        Self::NetWMWindowType => "NetWMWindowType",

        Self::NetWMWindowTypeCombo => "NetWMWindowTypeCombo",
        Self::NetWMWindowTypeDesktop => "NetWMWindowTypeDesktop",
        Self::NetWMWindowTypeDialog => "NetWMWindowTypeDialog",
        Self::NetWMWindowTypeDnd => "NetWMWindowTypeDnd",
        Self::NetWMWindowTypeDock => "NetWMWindowTypeDock",
        Self::NetWMWindowTypeDropdownMenu => "NetWMWindowTypeDropdownMenu",
        Self::NetWMWindowTypeMenu => "NetWMWindowTypeMenu",
        Self::NetWMWindowTypeNormal => "NetWMWindowTypeNormal",
        Self::NetWMWindowTypeNotification => "NetWMWindowTypeNotification",
        Self::NetWMWindowTypePopupMenu => "NetWMWindowTypePopupMenu",
        Self::NetWMWindowTypeSplash => "NetWMWindowTypeSplash",
        Self::NetWMWindowTypeToolbar => "NetWMWindowTypeToolbar",
        Self::NetWMWindowTypeTooltip => "NetWMWindowTypeTooltip",
        Self::NetWMWindowTypeUtility => "NetWMWindowTypeUtility",

        Self::NetWMStateAbove => "NetWMStateAbove",
        Self::NetWMStateBelow => "NetWMStateBelow",
        Self::NetWMStateDemandsAttention => "NetWMStateDemandsAttention",
        Self::NetWMStateFocused => "NetWMStateFocused",
        Self::NetWMStateFullscreen => "NetWMStateFullscreen",
        Self::NetWMStateHidden => "NetWMStateHidden",
        Self::NetWMStateMaximizedHorz => "NetWMStateMaximizedHorz",
        Self::NetWMStateMaximizedVert => "NetWMStateMaximizedVert",
        Self::NetWMStateModal => "NetWMStateModal",
        Self::NetWMStateSkipPager => "NetWMStateSkipPager",
        Self::NetWMStateSkipTaskbar => "NetWMStateSkipTaskbar",
        Self::NetWMStateStaysOnTop => "NetWMStateStaysOnTop",
        Self::NetWMStateSticky => "NetWMStateSticky",

        Self::All => "All",
      }
    )
  }
}
